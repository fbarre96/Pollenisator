swagger: "2.0"
info:
  description: This is the swagger file that goes with our server code
  version: "1.0.0"
  title: Swagger REST Article
consumes:
  - "application/json"
produces:
  - "application/json"

basePath: "/api/v1"

# Paths supported by the server application
paths:
  /:
    get:
      operationId: "server.mongo.status"
      tags:
        - "Mongo"
      summary: "Test connection"
      responses:
        200:
          description: "Successful read status operation"
  /worker:
    get:
      operationId: "server.worker.listWorkers"
      tags:
        - "Worker"
      summary: "Return workers documents from database"
      description: "Return workers documents from database
        Returns:
            Mongo result of workers. Cursor of dictionnary"
      parameters:
        - name: pipeline
          in: query
          type: string
          description: query workers with filters
          required: false
          default: "{}"
      responses:
        200:
          description: "Successful read worker list operation"
          schema:
            type: array
            items:
              properties:
                _id:
                  type: string
                last_heartbeat: 
                  type: string
                name:
                  type: string
                shortname:
                  type: string
                registeredCommands:
                  type: array
                  items:
                    type: string
  /worker/removeInactiveWorkers:
    get:
      operationId: "server.worker.removeInactiveWorkers"
      tags:
        - "Worker"
      summary: "Remove inactive workers from database"
      responses:
        200:
          description: "Successful removal of inactive worker operation"
          schema:
            type: "object"
            properties:
              n:
                type: integer
  /worker/{name}:
    delete:
      operationId: "server.worker.deleteWorker"
      tags:
        - "Worker"
      summary: "delete workers from database"
      parameters:
        - name: name
          in: path
          type: string
          description: query workers with filters
          required: true
      responses:
        200:
          description: "Successful delete worker operation"
          schema:
            type: "object"
            properties:
              n:
                type: integer
        404:
          description: "Worker name not found"
  /worker/{name}/setExclusion:
    put:
      operationId: "server.worker.setExclusion"
      tags:
        - "Worker"
      summary: "Set a worker exclusion from database"
      description: "Set a worker exclusion from database"
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: worker
          in: body
          schema:
            type: object
            required:
              - db
              - setExcluded
            properties:
              db:
                type: string
              setExcluded:
                type: boolean
      responses:
        200:
          description: "Successful update of worker excluded database"
          schema:
            type: "object"
            properties:
              n:
                type: integer
              nModifider:
                type: integer
              ok:
                type: integer
              updatedExisting:
                type: boolean

  /worker/{name}/updateHeartbeat:
    put:
      operationId: "server.worker.updateHeartbeat"
      tags:
        - "Worker"
      summary: "Update a worker last heart beat sent"
      parameters:
        - name: name
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful update of worker excluded database"
          schema:
            type: "object"
            properties:
              n:
                type: integer
              nModifider:
                type: integer
              ok:
                type: integer
              updatedExisting:
                type: boolean
  
  /worker/{name}/registerCommands:
    put:
      operationId: "server.worker.registerCommands"
      tags:
        - "Worker"
      summary: "Set a worker registered commands"
      description: "Set a worker registered commands"
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: command_names
          in: body
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: "Successful update of worker registed commands"

  /worker/{name}/getRegisteredCommands:
    get:
      operationId: "server.worker.getRegisteredCommands"
      tags:
        - "Worker"
      summary: "Get a worker registered commands"
      description: "Get a worker registered commands"
      parameters:
        - name: name
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful get"
          schema:
            type: array
            items:
              type: string

  /update/{pentest}/{collection}/:
    post:
      operationId: "server.mongo.update"
      tags:
        - "Mongo"
      summary: "Update something in db"
      description: "Update something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            required:
              - pipeline
              - updatePipeline
            properties:
              pipeline:
                type: string
              updatePipeline:
                type: string
              many:
                type: boolean
                default: false
              notify:
                type: boolean
                default: false
      responses:
        200:
          description: "Successful update command"

  /insert/{pentest}/{collection}/:
    post:
      operationId: "server.mongo.insert"
      tags:
        - "Mongo"
      summary: "Insert something in db"
      description: "Insert something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            required:
              - pipeline
            properties:
              pipeline:
                type: string
              notify:
                type: boolean
                default: false
      responses:
        200:
          description: "Successful insert command"
          
  /find/{pentest}/{collection}/:
    post:
      operationId: "server.mongo.find"
      tags:
        - "Mongo"
      summary: "Find something in db"
      description: "Find something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            properties:
              pipeline:
                type: string
                default: "{}"
              many:
                type: boolean
                default: false
      responses:
        200:
          description: "Successful find command"
  
  /count/{pentest}/{collection}/:
    post:
      operationId: "server.mongo.count"
      tags:
        - "Mongo"
      summary: "Cout something in db"
      description: "Cout something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            properties:
              pipeline:
                type: string
                default: "{}"
      responses:
        200:
          description: "Successful count command"

  /aggregate/{pentest}/{collection}/:
    post:
      operationId: "server.mongo.aggregate"
      tags:
        - "Mongo"
      summary: "aggregate something in db"
      description: "aggregate something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: pipelines
          in: body
          schema:
            type: array
            items:
              type: object
              properties:
                pipeline:
                  type: string
                  default: "{}"
      responses:
        200:
          description: "Successful aggregate command"

  /delete/{pentest}/{collection}/:
    post:
      operationId: "server.mongo.delete"
      tags:
        - "Mongo"
      summary: "Delete something in db"
      description: "Delete something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            required:
              - pipeline
            properties:
              pipeline:
                type: string
              many:
                type: boolean
                default: false
              notify:
                type: boolean
                default: false
      responses:
        200:
          description: "Successful delete command"

  /pentests:
    get:
      operationId: "server.mongo.listPentests"
      tags:
        - "pentest"
      summary: "Get a list of pentests"
      responses:
        200:
          description: "Successful get"
          schema:
            type: array
            items:
              type: string
  /pentest/{pentest}:
    delete:
      operationId: "server.mongo.deletePentest"
      tags:
        - "pentest"
      summary: "Remove a pentest"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful deletion"
  /pentest/{pentest}:
    post:
      operationId: "server.mongo.registerCalendar"
      tags:
        - "pentest"
      summary: "Create a pentest"   
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful creation"
  /notification/{pentest}:
    get:
      operationId: "server.mongo.fetchNotifications"
      tags:
        - "Notification"
      summary: "Return notifications documents from database"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful read notifications operation"
  /notification:
    post:
      operationId: "server.mongo.pushNotification"
      tags:
        - "Notification"
      summary: "Create a notification  in database"
      parameters:
        - name: data
          in: body
          schema:
            type: object
            required:
              - pentest
              - collection
              - iid
              - action
            properties:
              pentest:
                type: string
              collection:
                type: string
              iid:
                type: string
              action:
                type: string
                enum: [insert, update, delete]
              parentId:
                type: string
                default: ""
      responses:
        200:
          description: "Successful write notification operation"

  /settings:
    get:
      operationId: "server.mongo.getSettings"
      tags:
        - "Settings"
      summary: "Get global pollenisator settings"
      responses:
        200:
          description: "Get global pollenisator settings"
  /settings:
    post: 
      operationId: "server.mongo.createSetting"
      tags:
        - "Settings"
      summary: "Create global pollenisator settings"
      parameters:
        - name: data
          in: body
          schema:
            type: object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                type: string
      responses:
        200:
          description: "Created global pollenisator settings"

  /settings:
    put: 
      operationId: "server.mongo.updateSetting"
      tags:
        - "Settings"
      summary: "Update global pollenisator settings"
      parameters:
        - name: data
          in: body
          schema:
            type: object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                type: string
      responses:
        200:
          description: "Created global pollenisator settings"
      
  /settings/search:
    get:
      operationId: "server.mongo.getSetting"
      tags:
        - "Settings"
      summary: "Get global pollenisator settings filtered"
      parameters:
        - name: pipeline
          in: query
          type: string
          default: "{}"
          required: false
      responses:
        200:
          description: "Get global pollenisator settings"

  
