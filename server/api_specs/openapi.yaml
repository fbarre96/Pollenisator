openapi: 3.0.0
info:
  description: Pollenisator index api file
  version: 1.0.0
  title: Swagger REST Article


servers:
- url: /api/v1
components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: server.token.decode_token
      
  requestBodies:
    Tools:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tools"
      required: true
    Ips:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Ips"
      required: true
    Ports:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Ports"
      required: true
    Defects:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Defects"
      required: true
    server.mongo.importDb:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              upfile:
                description: The file to upload
                type: string
                format: binary
            required:
              - upfile
    server.mongo.createSettingData:
      content:
        application/json:
          schema:
            type: object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                type: string
    Commands:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Commands"
      required: true
    CommandGroups:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommandGroups"
      required: true
    Intervals:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Intervals"
      required: true
    Scopes:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Scopes"
      required: true
    Waves:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Waves"
      required: true
  schemas:
    Commands:
      properties:
        name:
          type: string
        lvl:
          type: string
          enum:
            - port
            - ip
            - wave
            - domain
            - network
        priority:
          type: integer
          minimum: 0
          maximum: 99
        sleep_between:
          type: integer
        max_thread:
          type: integer
        text:
          type: string
        ports:
          type: string
        safe:
          type: boolean
        types:
          type: array
          items:
            type: string
        indb:
          type: string
        timeout:
          type: integer
    CommandGroups:
      properties:
        name:
          type: string
        sleep_between:
          type: integer
        max_thread:
          type: integer
        commands:
          type: array
          items:
            type: string
    Defects:
      properties:
        ip:
          type: string
        title:
          type: string
        port:
          type: string
        proto:
          type: string
          enum:
            - tcp
            - udp
            - ""
        notes:
          type: string
        ease:
          type: string
          enum:
            - Facile
            - Modérée
            - Difficile
            - Très difficile
            - N/A
        impact:
          type: string
          enum:
            - Mineur
            - Important
            - Majeur
            - Critique
            - N/A
        risk:
          type: string
          enum:
            - Mineur
            - Important
            - Majeur
            - Critique
            - N/A
        redactor:
          type: string
        type:
          type: array
          items:
            type: string
        proofs:
          type: array
          items:
            type: string
        index:
          type: string
          default: end
    Intervals:
      properties:
        wave:
          type: string
        dated:
          type: string
        datef:
          type: string
    Ips:
      properties:
        ip:
          type: string
        notes:
          type: string
        tags:
          type: array
          items:
            type: string
        in_scopes:
          type: array
          items:
            type: string
    Ports:
      properties:
        ip:
          type: string
        port:
          type: string
        proto:
          type: string
          enum:
            - tcp
            - udp
            - ""
        service:
          type: string
        product:
          type: string
        notes:
          type: string
        tags:
          type: array
          items:
            type: string
    Scopes:
      properties:
        wave:
          type: string
        scope:
          type: string
        notes:
          type: string
    Tools:
      properties:
        wave:
          type: string
        scope:
          type: string
        ip:
          type: string
        port:
          type: string
        proto:
          type: string
          enum:
            - tcp
            - udp
            - ""
        name:
          type: string
        lvl:
          type: string
          enum:
            - port
            - ip
            - wave
            - domain
            - network
    Waves:
      properties:
        wave:
          type: string
        wave_commands:
          type: array
          items:
            type: string
    Instructions:
      properties:
        function:
          type: string
        args:
          type: array
          items:
            type: string

security:
  - jwt: []

paths:
  /:
    get:
      operationId: server.mongo.status
      tags:
        - Mongo
      summary: Test connection
      security: []
      responses:
        "200":
          description: Successful read status operation
  /issue:
    post:
      operationId: server.logger.report
      tags:
        - Logger
      summary: report an issue from client
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - error
              properties:
                error:
                  type: string
      security: []
      responses:
        "200":
          description: Reported a client issue successfully
 
  /user/register:
    post:
      operationId: server.auth.createUser
      tags:
        - Admin
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - pwd
              properties:
                username:
                  type: string
                pwd:
                  type: string
      responses:
        "200":
          description: successfully created a new user

  /user/delete/{username}:
    delete:
      operationId: server.auth.deleteUser
      tags:
        - Admin
      summary: Delete a user
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successfully deleted a user

  /user/changePassword:
    post:
      operationId: server.auth.changePassword
      tags:
        - Security
      summary: Change a user password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPwd
                - newPwd
              properties:
                oldPwd:
                  type: string
                newPwd:
                  type: string
      responses:
        "200":
          description: successfully changed user password
  
  /admin/resetPassword:
    post:
      operationId: server.auth.resetPassword
      tags:
        - Admin
      summary: reset a user password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - newPwd
              properties:
                username:
                  type: string
                newPwd:
                  type: string
      responses:
        "200":
          description: successfully changed another user password

  /user/searchUsers/{searchreq}:
    get:
      operationId: server.auth.searchUsers
      tags:
        - Users
      parameters:
        - name: searchreq
          in: path
          required: true
          schema:
            type: string
            minLength: 3
      summary: get a list of users filtered with search request (3 carac. min.)
      description: get a list of users 
      responses:
        "200":
          description: Get a list of users

  /admin/listUsers:
    get:
      operationId: server.auth.listUsers
      tags:
        - Admin
      summary: get a list of users 
      description: get a list of users 
      responses:
        "200":
          description: Get a list of users


  /login:
    post:
      operationId: server.auth.login
      tags:
        - Security
      summary: Login to access the app
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - pwd
              properties:
                username:
                  type: string
                pwd:
                  type: string
      responses:
        "200":
          description: successfully logged in, returns an  token
  /login/{pentest}:
    post:
      operationId: server.auth.connectToPentest
      tags:
        - Security
      summary: Login to access a pentest
      parameters:
      - name: pentest
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successfully logged in to a database, returns an  token
  "/update/{pentest}/{collection}":
    post:
      operationId: server.mongo.update
      tags:
        - Mongo
      summary: Update something in db
      description: Update something in db
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - pipeline
                - updatePipeline
              properties:
                pipeline:
                  type: string
                updatePipeline:
                  type: string
                many:
                  type: boolean
                  default: false
                notify:
                  type: boolean
                  default: false
      responses:
        "200":
          description: Successful update command
  "/insert/{pentest}/{collection}":
    post:
      operationId: server.mongo.insert
      tags:
        - Mongo
      summary: Insert something in db
      description: Insert something in db
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - pipeline
              properties:
                pipeline:
                  type: string
                parent:
                  type: string
                  default: ""
                notify:
                  type: boolean
                  default: false
      responses:
        "200":
          description: Successful insert command
  "/find/{pentest}/{collection}":
    post:
      operationId: server.mongo.find
      tags:
        - Mongo
      summary: Find something in db
      description: Find something in db
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pipeline:
                  type: string
                  example: "{}"
                many:
                  type: boolean
                  default: false
      responses:
        "200":
          description: Successful find command
  "/search/{pentest}":
    get:
      operationId: server.mongo.search
      tags:
        - Mongo
      summary: Search using python like query syntax
      description: Find matching objects in database
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: s
          in: query
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: Successful search results. A dictionnary with type of objects as
            keys and matching documents in a list as value
  "/count/{pentest}/{collection}":
    post:
      operationId: server.mongo.count
      tags:
        - Mongo
      summary: Cout something in db
      description: Cout something in db
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pipeline:
                  type: string
                  default: "{}"
                  example: "{}"
      responses:
        "200":
          description: Successful count command
  "/dumpDb/{dbName}":
    get:
      operationId: server.mongo.dumpDb
      tags:
        - Mongo
      summary: Dump a database as an archive
      parameters:
        - name: dbName
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: query
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: archive content
  /importDb:
    post:
      operationId: server.mongo.importDb
      tags:
        - Mongo
      summary: Import an existing database file
      requestBody:
        $ref: "#/components/requestBodies/server.mongo.importDb"
      responses:
        "200":
          description: Successfully imported the file
  /importCommands:
    post:
      operationId: server.mongo.importCommands
      tags:
        - Admin
      summary: Import an existing command database file
      requestBody:
        $ref: "#/components/requestBodies/server.mongo.importDb"
      responses:
        "200":
          description: Successfully imported the file
  /copyDb:
    post:
      operationId: server.mongo.copyDb
      tags:
        - Mongo
      summary: Duplicate a database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fromDb
                - toDb
              properties:
                fromDb:
                  type: string
                toDb:
                  type: string
      responses:
        "200":
          description: Successfully imported the file
  "/aggregate/{pentest}/{collection}":
    post:
      operationId: server.mongo.aggregate
      tags:
        - Mongo
      summary: aggregate something in db
      description: aggregate something in db
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  pipeline:
                    type: string
                    default: "{}"
                    example: "{}"
      responses:
        "200":
          description: Successful aggregate command
  "/delete/{pentest}/{collection}":
    post:
      operationId: server.mongo.delete
      tags:
        - Mongo
      summary: Delete something in db
      description: Delete something in db
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - pipeline
              properties:
                pipeline:
                  type: string
                many:
                  type: boolean
                  default: false
                notify:
                  type: boolean
                  default: false
      responses:
        "200":
          description: Successful delete command
  "/delete/{pentest}/bulk":
    post:
      operationId: server.mongo.bulk_delete
      tags:
        - Mongo
      summary: Delete many things in db
      description: Delete many things in db
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              
      responses:
        "200":
          description: Successful delete command
  /pentests:
    get:
      operationId: server.mongo.listPentests
      tags:
        - pentest
      summary: Get a list of pentests
      responses:
        "200":
          description: Successful get
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  "/pentest/{pentest}/delete":
    delete:
      operationId: server.mongo.deletePentest
      tags:
        - pentest
      summary: Remove a pentest
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful deletion
  "/pentest/{pentest}":
    post:
      operationId: server.mongo.registerCalendar
      tags:
        - pentest
      summary: Create a pentest
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - pentest_type
                - start_date
                - end_date
                - scope
                - settings
                - pentesters
              properties:
                pentest_type:
                  type: string
                start_date:
                  type: string
                  format: date-time
                end_date:
                  type: string
                  format: date-time
                scope:
                  type: string
                pentesters:
                  type: string
                settings:
                  type: object
                  properties:
                    Add domains whose IP are in scope:
                      type: integer
                      minimum: 0
                      maximum: 1
                    Add domains who have a parent domain in scope:
                      type: integer
                      minimum: 0
                      maximum: 1
                    Add all domains found:
                      type: integer
                      minimum: 0
                      maximum: 1
                  required:
                    - Add domains whose IP are in scope
                    - Add domains who have a parent domain in scope
                    - Add all domains found
      responses:
        "200":
          description: Successful creation
  "/notification/{pentest}":
    get:
      operationId: server.mongo.fetchNotifications
      tags:
        - Notification
      summary: Return notifications documents from database, also used as keep alive
        method
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: fromTime
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Successful read notifications operation
  /settings/add:
    post:
      operationId: server.mongo.createSetting
      tags:
        - Admin
      summary: Create global pollenisator settings
      requestBody:
        $ref: "#/components/requestBodies/server.mongo.createSettingData"
      responses:
        "200":
          description: Created global pollenisator settings
  /settings/update:
    put:
      operationId: server.mongo.updateSetting
      tags:
        - Settings
      summary: Update global pollenisator settings
      requestBody:
        $ref: "#/components/requestBodies/server.mongo.createSettingData"
      responses:
        "200":
          description: Created global pollenisator settings
  /settings/search:
    get:
      operationId: server.mongo.getSetting
      tags:
        - Settings
      summary: Get global pollenisator settings filtered
      parameters:
        - name: pipeline
          in: query
          required: false
          schema:
            type: string
            default: "{}"
            example: "{}"
      responses:
        "200":
          description: Get global pollenisator settings
  /settings:
    get:
      operationId: server.mongo.getSettings
      tags:
        - Settings
      summary: Get global pollenisator settings
      responses:
        "200":
          description: Get global pollenisator settings
  /workers:
    get:
      operationId: server.worker.listWorkers
      tags:
        - Worker
      summary: Return workers documents from database
      description: "Return workers documents from database Returns: Mongo result of
        workers. Cursor of dictionnary"
      parameters:
        - name: pipeline
          in: query
          description: query workers with filters
          required: false
          schema:
            type: string
            default: "{}"
            example: "{}"
      responses:
        "200":
          description: Successful read worker list operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    _id:
                      type: string
                    last_heartbeat:
                      type: string
                    name:
                      type: string
                    shortname:
                      type: string
                    registeredCommands:
                      type: array
                      items:
                        type: string
  "/workers/{name}":
    delete:
      operationId: server.worker.deleteWorker
      tags:
        - Worker
      summary: delete workers from database
      parameters:
        - name: name
          in: path
          description: query workers with filters
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful delete worker operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  n:
                    type: integer
        "404":
          description: Worker name not found
  "/workers/{name}/setInclusion":
    put:
      operationId: server.worker.setInclusion
      tags:
        - Worker
      summary: Set a worker exclusion from database
      description: Set a worker exclusion from database
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - db
                - setInclusion
              properties:
                db:
                  type: string
                setInclusion:
                  type: boolean
      responses:
        "200":
          description: Successful update of worker inclusion in a pentest
          content:
            application/json:
              schema:
                type: object
                properties:
                  n:
                    type: integer
                  nModifider:
                    type: integer
                  ok:
                    type: integer
                  updatedExisting:
                    type: boolean
  /workers/register/:
    post:
      operationId: server.worker.registerWorker
      tags:
        - Worker
      summary: register the caller as worker
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - command_names
              properties:
                name:
                  type: string
                command_names:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Successful registered a worker
  "/workers/{name}/registerCommands":
    put:
      operationId: server.worker.registerCommands
      tags:
        - Worker
      summary: Set a worker registered commands
      description: Set a worker registered commands
      security: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Successful update of worker registed commands
  "/workers/{name}/setCommandConfig":
    put:
      operationId: server.worker.setCommandConfig
      tags:
        - Worker
      summary: Set a worker registered command plugin and bin path
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - command_name
                - remote_bin
                - plugin
              properties:
                command_name:
                  type: string
                remote_bin:
                  type: string
                plugin:
                  type: string
      responses:
        "200":
          description: Successful update of worker registed commands
  "/workers/{name}/unregister":
    post:
      operationId: server.worker.unregister
      tags:
        - Worker
      summary: Remvoe a worker from the lsit of workers
      description: Set a worker unregistered
      security: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful update of worker registed commands
  "/workers/{name}/getRegisteredCommands":
    get:
      operationId: server.worker.getRegisteredCommands
      tags:
        - Worker
      summary: Get a worker registered commands
      description: Get a worker registered commands
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful get
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  "/workers/{name}/instructions":
    get:
      operationId: server.worker.getInstructions
      tags:
        - Worker
      summary: Pull worker instructions
      security: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful get
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Instructions"
  "/workers/{name}/instructions/{instruction_iid}":
    delete:
      operationId: server.worker.deleteInstruction
      tags:
        - Worker
      summary: delete a worker instruction
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: instruction_iid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful deletion of instruction
  "/commands/{pentest}":
    post:
      operationId: server.ServerModels.Command.insert
      tags:
        - Commands
      summary: Insert a command or return the conflicting existing one
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Commands"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/commands/update/{pentest}/{command_iid}":
    put:
      operationId: server.ServerModels.Command.update
      tags:
        - Commands
      summary: "Update a command "
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: command_iid
          in: path
          description: command iid to delete
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Commands"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/commands/{pentest}/{command_iid}":
    delete:
      operationId: server.ServerModels.Command.delete
      tags:
        - Commands
      summary: Delete a command and dependencies
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: command_iid
          in: path
          description: command iid to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get a delete count
  "/group_commands/{pentest}/{command_group_iid}":
    delete:
      operationId: server.ServerModels.CommandGroup.delete
      tags:
        - CommandGroup
      summary: Delete a group of command
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: command_group_iid
          in: path
          description: group of command iid to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get a delete count
  "/group_commands/{pentest}":
    post:
      operationId: server.ServerModels.CommandGroup.insert
      tags:
        - CommandGroup
      summary: Insert a group of command or return the conflicting existing one
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CommandGroups"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/group_commands/update/{pentest}/{command_group_iid}":
    put:
      operationId: server.ServerModels.CommandGroup.update
      tags:
        - CommandGroup
      summary: "Update a group of command "
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: command_group_iid
          in: path
          description: group of command iid to delete
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CommandGroups"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/defects/{pentest}":
    post:
      operationId: server.ServerModels.Defect.insert
      tags:
        - Defects
      summary: Insert a defect or return the conflicting existing one
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Defects"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/defects/update/{pentest}/{defect_iid}":
    put:
      operationId: server.ServerModels.Defect.update
      tags:
        - Defects
      summary: "Update a defect "
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: defect_iid
          in: path
          description: defect iid to delete
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Defects"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/defects/{pentest}/{defect_iid}":
    delete:
      operationId: server.ServerModels.Defect.delete
      tags:
        - Defects
      summary: Delete a defect and dependencies
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: defect_iid
          in: path
          description: defect iid to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get a delete count
  "/intervals/{pentest}":
    post:
      operationId: server.ServerModels.Interval.insert
      tags:
        - Intervals
      summary: Insert an interval or return the conflicting existing one
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Intervals"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/intervals/update/{pentest}/{interval_iid}":
    put:
      operationId: server.ServerModels.Interval.update
      tags:
        - Intervals
      summary: "Update an interval "
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: interval_iid
          in: path
          description: interval iid to delete
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Intervals"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/intervals/{pentest}/{interval_iid}":
    delete:
      operationId: server.ServerModels.Interval.delete
      tags:
        - Intervals
      summary: Delete an interval and dependencies
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: interval_iid
          in: path
          description: defect iid to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get a delete count
  "/ips/{pentest}":
    post:
      operationId: server.ServerModels.Ip.insert
      tags:
        - Ips
      summary: Insert an ip or return the conflicting existing one
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Ips"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/ips/update/{pentest}/{ip_iid}":
    put:
      operationId: server.ServerModels.Ip.update
      tags:
        - Ips
      summary: "Update an ip "
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: ip_iid
          in: path
          description: ip iid to delete
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Ips"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/ips/{pentest}/{ip_iid}":
    delete:
      operationId: server.ServerModels.Ip.delete
      tags:
        - Ips
      summary: Delete an ip and dependencies
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: ip_iid
          in: path
          description: ip iid to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get a delete count
  "/ports/{pentest}":
    post:
      operationId: server.ServerModels.Port.insert
      tags:
        - Ports
      summary: Insert an port or return the conflicting existing one
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Ports"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/ports/update/{pentest}/{port_iid}":
    put:
      operationId: server.ServerModels.Port.update
      tags:
        - Ports
      summary: Update a port
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: port_iid
          in: path
          description: port iid to delete
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Ports"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/ports/{pentest}/{port_iid}":
    delete:
      operationId: server.ServerModels.Port.delete
      tags:
        - Ports
      summary: Delete a port and dependencies
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: port_iid
          in: path
          description: port iid to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get a delete count
  "/ports/{pentest}/{port_iid}/addCustomTool/":
    post:
      operationId: server.ServerModels.Port.addCustomTool
      tags:
        - Ports
      summary: Add a tool manually to a port in the 'Custom Tools' wave
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: port_iid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tool_name
              properties:
                tool_name:
                  type: string
        required: true
      responses:
        "200":
          description: return boolean
  "/scopes/{pentest}":
    post:
      operationId: server.ServerModels.Scope.insert
      tags:
        - Scopes
      summary: Insert a scope or return the conflicting existing one
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Scopes"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/scopes/update/{pentest}/{scope_iid}":
    put:
      operationId: server.ServerModels.Scope.update
      tags:
        - Scopes
      summary: Update a scope
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: scope_iid
          in: path
          description: scope iid to delete
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Scopes"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/scopes/{pentest}/{scope_iid}":
    delete:
      operationId: server.ServerModels.Scope.delete
      tags:
        - Scopes
      summary: Delete a scope and dependencies
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: scope_iid
          in: path
          description: scope iid to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get a delete count
  /tools/plugins:
    get:
      operationId: server.ServerModels.Tool.listPlugins
      tags:
        - Tools
      summary: Get a list of existing plugins
      responses:
        "200":
          description: Successful get
  "/tools/{pentest}":
    post:
      operationId: server.ServerModels.Tool.insert
      tags:
        - Tools
      summary: Insert a tool or return the conflicting existing one
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Tools"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/tools/update/{pentest}/{tool_iid}":
    put:
      operationId: server.ServerModels.Tool.update
      tags:
        - Tools
      summary: Update a tool
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: tool_iid
          in: path
          description: tool iid to delete
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Tools"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/tools/{pentest}/{tool_iid}":
    delete:
      operationId: server.ServerModels.Tool.delete
      tags:
        - Tools
      summary: Delete a tool and dependencies
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: tool_iid
          in: path
          description: tool iid to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get a delete count
  "/waves/{pentest}":
    post:
      operationId: server.ServerModels.Wave.insert
      tags:
        - Waves
      summary: Insert a wave or return the conflicting existing one
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Waves"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/waves/update/{pentest}/{wave_iid}":
    put:
      operationId: server.ServerModels.Wave.update
      tags:
        - Waves
      summary: Update a wave
      parameters:
        - name: pentest
          in: path
          required: true
          schema:
            type: string
        - name: wave_iid
          in: path
          description: wave iid to delete
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Waves"
      responses:
        "200":
          description: Get a boolean for success and insert idof either new or conflicting
            object
  "/waves/{pentest}/{wave_iid}":
    delete:
      operationId: server.ServerModels.Wave.delete
      tags:
        - Waves
      summary: Delete a wave and dependencies
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: wave_iid
          in: path
          description: wave wave_iid to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get a delete count
  "/files/{pentest}/upload/proof/{defect_iid}":
    post:
      operationId: server.FileManager.upload
      tags:
        - FileManager
      summary: Upload a file
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: defect_iid
          in: path
          description: file will be tied to given iid
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/server.mongo.importDb"
      responses:
        "200":
          description: Successfully uploaded file
  "/files/{pentest}/download/{filetype}/{attached_iid}":
    get:
      operationId: server.FileManager.listFiles
      tags:
        - FileManager
      summary: Lists attached to given iid
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: attached_iid
          in: path
          description: file will be tied to given iid
          required: true
          schema:
            type: string
        - name: filetype
          in: path
          required: true
          schema:
            type: string
            enum:
              - result
              - proof
      responses:
        "200":
          description: Successfully listed files
  "/files/{pentest}/download/{filetype}/{attached_iid}/{filename}":
    get:
      operationId: server.FileManager.download
      tags:
        - FileManager
      summary: Download a file
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: attached_iid
          in: path
          description: file will be tied to given iid
          required: true
          schema:
            type: string
        - name: filetype
          in: path
          required: true
          schema:
            type: string
            enum:
              - result
              - proof
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully downloaded file
  "/files/{pentest}/{defect_iid}/{filename}":
    delete:
      operationId: server.FileManager.rmProof
      tags:
        - FileManager
      summary: Remove a proof file
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: defect_iid
          in: path
          description: object iid which have the file to delete
          required: true
          schema:
            type: string
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully deleted the file
  "/files/{pentest}/import":
    post:
      operationId: server.FileManager.importExistingFile
      tags:
        - FileManager
      summary: Import an existing tool file
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                upfile:
                  description: The file to upload
                  type: string
                  format: binary
                plugin:
                  description: plugin name to use or "auto-detect"
                  type: string
              required:
                - upfile
                - plugin
      responses:
        "200":
          description: Successfully imported the file
  "/tools/{pentest}/craftCommandLine/{tool_iid}":
    get:
      operationId: server.ServerModels.Tool.craftCommandLine
      tags:
        - Tools
      summary: Get the command line to execute the tool (using plugin + parameters) a
        marker for |outputDir| is to be replaced
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: tool_iid
          in: path
          description: tool iid for which we want a command line
          required: true
          schema:
            type: string
        - name: plugin
          in: query
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: The command line to execute with a marker for |outputDir| to be
            replaced
  "/tools/{pentest}/importResult/{tool_iid}":
    post:
      operationId: server.ServerModels.Tool.importResult
      tags:
        - Tools
      summary: Upload a tool result file
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: tool_iid
          in: path
          description: tool iid to launch
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                upfile:
                  description: The file to upload
                  type: string
                  format: binary
                plugin:
                  type: string
                  default: ""
              required:
                - upfile
      responses:
        "200":
          description: Successfully uploaded file
  "/tools/{pentest}/launchTask/{tool_iid}":
    post:
      operationId: server.ServerModels.Tool.launchTask
      tags:
        - Tools
      summary: Try to launch a tool on any worker
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: tool_iid
          in: path
          description: tool id to launch
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                plugin:
                  type: string
                  default: ""
                checks:
                  type: boolean
                  default: true
      responses:
        "200":
          description: Successfully launched task
  "/tools/{pentest}/stopTask/{tool_iid}":
    post:
      operationId: server.ServerModels.Tool.stopTask
      tags:
        - Tools
      summary: Try to stop a tool
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: tool_iid
          in: path
          description: tool id to stop
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                forceReset:
                  type: boolean
                  default: false
      responses:
        "200":
          description: Successfully stopped task
  "/tools/{pentest}/{tool_iid}/changeStatus":
    post:
      operationId: server.ServerModels.Tool.setStatus
      tags:
        - Tools
      summary: Update a tool staus
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: tool_iid
          in: path
          description: tool id to stop
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - newStatus
              properties:
                newStatus:
                  type: array
                  items:
                    type: string
                    enum:
                      - OOS
                      - OOT
                      - not_done
                      - running
                      - error
                      - done
                      - ready
                      - timedout
                arg:
                  type: string
                  default: ""
      responses:
        "200":
          description: Successfully updated tool status
  "/autoscan/{pentest}/start":
    post:
      operationId: server.AutoScanMaster.startAutoScan
      tags:
        - Auto scan
      summary: Start an automatic scan
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully started auto scan
  "/autoscan/{pentest}/status":
    get:
      operationId: server.AutoScanMaster.getAutoScanStatus
      tags:
        - Auto scan
      summary: Returns status of automatic scan
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully returned status of auto scan
  "/autoscan/{pentest}/stop":
    post:
      operationId: server.AutoScanMaster.stopAutoScan
      tags:
        - Auto scan
      summary: Stop an automatic scan
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully stoped auto scan
  /report/templates:
    get:
      operationId: server.Report.getTemplateList
      tags:
        - Report
      summary: Get a lsit of report template
      responses:
        "200":
          description: A list of avalaible templates names
  /report/templates/download:
    get:
      operationId: server.Report.downloadTemplate
      tags:
        - Report
      summary: Download a report template
      parameters:
        - name: templateName
          in: query
          description: template name to download
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A template file docx or pptx
  /report/templates/upload:
    post:
      operationId: server.Report.uploadTemplate
      tags:
        - Report
      summary: Upload a report template
      requestBody:
        $ref: "#/components/requestBodies/server.mongo.importDb"
      responses:
        "200":
          description: An indication of success for uploadfin template file docx or pptx
  "/report/{pentest}/generate":
    get:
      operationId: server.Report.generateReport
      tags:
        - Report
      summary: Generate a report and returns it
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: templateName
          in: query
          description: template name to generate from
          required: true
          schema:
            type: string
        - name: contractName
          in: query
          description: template name to generate from
          required: true
          schema:
            type: string
        - name: clientName
          in: query
          description: template name to generate from
          required: true
          schema:
            type: string
        - name: mainRedactor
          in: query
          description: template name to generate from
          required: false
          schema:
            type: string
            default: N/A
      responses:
        "200":
          description: A template file docx or pptx
  "/report/{pentest}/defects":
    get:
      operationId: server.ServerModels.Defect.getGlobalDefects
      tags:
        - Report
      summary: Get the ordered list of global defect
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of defect
  "/report/{pentest}/defects/move/{defect_id_to_move}/{target_id}":
    post:
      operationId: server.ServerModels.Defect.moveDefect
      tags:
        - Report
      summary: Move one defect at the index of the other. Other index are impacted
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: defect_id_to_move
          in: path
          description: defect_id to move
          required: true
          schema:
            type: string
        - name: target_id
          in: path
          description: target_id to move to
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success

  "/report/search":
    get:
      operationId: server.Report.search
      tags:
        - Report
      summary: search a defect/remark on an external app
      parameters:
        - name: type
          in: query
          description: defect or remark
          required: true
          schema:
            type: string
            enum:
              - defect
              - remark
        - name: q
          in: query
          description: terms for the saerch
          schema:
            type: string
      responses:
        "200":
          description: Success
