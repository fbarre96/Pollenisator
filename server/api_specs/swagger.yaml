swagger: "2.0"
info:
  description: Pollenisator index api file
  version: "1.0.0"
  title: Swagger REST Article
consumes:
  - "application/json"
produces:
  - "application/json"

basePath: "/api/v1"

definitions:
  Commands:
    properties:
      name:
        type: string
      lvl:
        type: string
        enum: ["port", "ip", "wave", "domain", "network"]
      priority:
        type: integer
        minimum: 0
        maximum: 99
      sleep_between:
        type: integer
      max_thread:
        type: integer
      text:
        type: string
      ports:
        type: string
      safe:
        type: boolean
      types: 
        type: array
        items:
          type: string
      indb:
        type: string
      timeout:
        type: integer

  CommandGroups:
    properties:
      name:
        type: string
      sleep_between:
        type: integer
      max_thread:
        type: integer
      commands:
        type: array
        items:
          type: string
  Defects:
    properties:
      ip:
        type: string
      title:
        type: string
      port:
        type: string
      proto:
        type: string
        enum: ["tcp", "udp", ""]
      notes:
        type: string
      ease:
        type: string
        enum: ["Facile", "Modérée", "Difficile", "Très difficile", "N/A"]
      impact:
        type: string
        enum: ["Mineur", "Important", "Majeur", "Critique", "N/A"]
      risk:
        type: string
        enum: ["Mineur", "Important", "Majeur", "Critique", "N/A"]
      redactor:
        type: string
      type:
        type: array
        items:
          type: string
      proofs:
        type: array
        items:
          type: string
      index:
        type: string
        default: "end"

  Intervals:
    properties:
      wave:
        type: string
      dated:
        type: string
      datef:
        type: string
  
  Ips:
    properties:
      ip:
        type: string
      notes:
        type: string
      tags:
        type: array
        items:
          type: string
      in_scopes:
        type: array
        items:
          type: string
  Ports:
    properties:
      ip:
        type: string
      port:
        type: string
      proto:
        type: string
        enum: ["tcp", "udp", ""]
      service:
        type: string
      product:
        type: string
      notes:
        type: string
      tags:
        type: array
        items:
          type: string
  Scopes:
    properties:
      wave:
        type: string
      scope:
        type: string
      notes:
        type: string
  Tools:
    properties:
      wave:
        type: string
      scope:
        type: string
      ip:
        type: string
      port:
        type: string
      proto: 
        type: string
        enum: ["tcp", "udp", ""]
      name: 
        type: string
      lvl:
        type: string
        enum: ["port", "ip", "wave", "domain", "network"]
  Waves:
    properties:
      wave:
        type: string
      wave_commands:
        type: array
        items:
          type: string
  Instructions:
    properties:
      function:
        type: string
      args:
        type: array
        items:
          type: string
        
# Paths supported by the server application
paths:
  /:
    get:
      operationId: "server.mongo.status"
      tags:
        - "Mongo"
      summary: "Test connection"
      responses:
        200:
          description: "Successful read status operation"
  
  /update/{pentest}/{collection}:
    post:
      operationId: "server.mongo.update"
      tags:
        - "Mongo"
      summary: "Update something in db"
      description: "Update something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            required:
              - pipeline
              - updatePipeline
            properties:
              pipeline:
                type: string
              updatePipeline:
                type: string
              many:
                type: boolean
                default: false
              notify:
                type: boolean
                default: false
      responses:
        200:
          description: "Successful update command"

  /insert/{pentest}/{collection}:
    post:
      operationId: "server.mongo.insert"
      tags:
        - "Mongo"
      summary: "Insert something in db"
      description: "Insert something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            required:
              - pipeline
            properties:
              pipeline:
                type: string
              parent:
                type: string
                default: ""
              notify:
                type: boolean
                default: false
      responses:
        200:
          description: "Successful insert command"
          
  /find/{pentest}/{collection}:
    post:
      operationId: "server.mongo.find"
      tags:
        - "Mongo"
      summary: "Find something in db"
      description: "Find something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            properties:
              pipeline:
                type: string
                default: "{}"
              many:
                type: boolean
                default: false
      responses:
        200:
          description: "Successful find command"
  
  /count/{pentest}/{collection}:
    post:
      operationId: "server.mongo.count"
      tags:
        - "Mongo"
      summary: "Cout something in db"
      description: "Cout something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            properties:
              pipeline:
                type: string
                default: "{}"
      responses:
        200:
          description: "Successful count command"

  /dumpDb/{dbName}:
    get:
      operationId: "server.mongo.dumpDb"
      tags:
        - "Mongo"
      summary: "Dump a database as an archive"
      parameters:
        - name: dbName
          in: path
          type: string
          required: true
        - name: collection
          in: query
          type: string
          required: false
          default: ''
      responses:
        200:
          description: "archive content"

  /importDb:
    post:
      operationId: "server.mongo.importDb"
      tags:
        - "Mongo"
      summary: "Import an existing database file"
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          type: file
          description: The file to upload
          required: true
      responses:
        200:
          description: "Successfully imported the file"

  /importCommands:
    post:
      operationId: "server.mongo.importCommands"
      tags:
        - "Mongo"
      summary: "Import an existing command database file"
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          type: file
          description: The file to upload
          required: true
      responses:
        200:
          description: "Successfully imported the file"

  /copyDb:
    post:
      operationId: "server.mongo.copyDb"
      tags:
        - "Mongo"
      summary: "Duplicate a database"
      parameters:
        - name: data
          in: body
          schema:
            type: object
            required:
              - fromDb
              - toDb
            properties:
              fromDb:
                type: string
              toDb:
                type: string
      responses:
        200:
          description: "Successfully imported the file"

  /aggregate/{pentest}/{collection}:
    post:
      operationId: "server.mongo.aggregate"
      tags:
        - "Mongo"
      summary: "aggregate something in db"
      description: "aggregate something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: pipelines
          in: body
          schema:
            type: array
            items:
              type: object
              properties:
                pipeline:
                  type: string
                  default: "{}"
      responses:
        200:
          description: "Successful aggregate command"

  /delete/{pentest}/{collection}:
    post:
      operationId: "server.mongo.delete"
      tags:
        - "Mongo"
      summary: "Delete something in db"
      description: "Delete something in db"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: collection
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            required:
              - pipeline
            properties:
              pipeline:
                type: string
              many:
                type: boolean
                default: false
              notify:
                type: boolean
                default: false
      responses:
        200:
          description: "Successful delete command"

  /pentests:
    get:
      operationId: "server.mongo.listPentests"
      tags:
        - "pentest"
      summary: "Get a list of pentests"
      responses:
        200:
          description: "Successful get"
          schema:
            type: array
            items:
              type: string

  /pentest/{pentest}/delete:
    delete:
      operationId: "server.mongo.deletePentest"
      tags:
        - "pentest"
      summary: "Remove a pentest"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful deletion"
  /pentest/{pentest}:
    post:
      operationId: "server.mongo.registerCalendar"
      tags:
        - "pentest"
      summary: "Create a pentest"   
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            required:
              - pentest_type
              - start_date
              - end_date
              - scope
              - settings
              - pentesters
            properties:
              pentest_type:
                type: string
              start_date:
                type: string
                format: date-time
              end_date:
                type: string
                format: date-time
              scope:
                type: string
              pentesters:
                type: string
              settings:
                type: object
                properties:
                  Add domains whose IP are in scope:
                    type: integer
                    minimum: 0
                    maximum: 1
                  Add domains who have a parent domain in scope:
                    type: integer
                    minimum: 0
                    maximum: 1
                  Add all domains found:
                    type: integer
                    minimum: 0
                    maximum: 1
                required:
                  - Add domains whose IP are in scope
                  - Add domains who have a parent domain in scope
                  - Add all domains found
      responses:
        200:
          description: "Successful creation"
  /notification/{pentest}:
    get:
      operationId: "server.mongo.fetchNotifications"
      tags:
        - "Notification"
      summary: "Return notifications documents from database, also used as keep alive method"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: fromTime
          in: query
          type: string
          format: date-time
      responses:
        200:
          description: "Successful read notifications operation"
  /settings/add:
    post: 
      operationId: "server.mongo.createSetting"
      tags:
        - "Settings"
      summary: "Create global pollenisator settings"
      parameters:
        - name: data
          in: body
          schema:
            type: object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                type: string
      responses:
        200:
          description: "Created global pollenisator settings"

  /settings/update:
    put: 
      operationId: "server.mongo.updateSetting"
      tags:
        - "Settings"
      summary: "Update global pollenisator settings"
      parameters:
        - name: data
          in: body
          schema:
            type: object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                type: string
      responses:
        200:
          description: "Created global pollenisator settings"
      
  /settings/search:
    get:
      operationId: "server.mongo.getSetting"
      tags:
        - "Settings"
      summary: "Get global pollenisator settings filtered"
      parameters:
        - name: pipeline
          in: query
          type: string
          default: "{}"
          required: false
      responses:
        200:
          description: "Get global pollenisator settings"
  /settings:
    get:
      operationId: "server.mongo.getSettings"
      tags:
        - "Settings"
      summary: "Get global pollenisator settings"
      responses:
        200:
          description: "Get global pollenisator settings"

  /workers:
    get:
      operationId: "server.worker.listWorkers"
      tags:
        - "Worker"
      summary: "Return workers documents from database"
      description: "Return workers documents from database
        Returns:
            Mongo result of workers. Cursor of dictionnary"
      parameters:
        - name: pipeline
          in: query
          type: string
          description: query workers with filters
          required: false
          default: "{}"
      responses:
        200:
          description: "Successful read worker list operation"
          schema:
            type: array
            items:
              properties:
                _id:
                  type: string
                last_heartbeat: 
                  type: string
                name:
                  type: string
                shortname:
                  type: string
                registeredCommands:
                  type: array
                  items:
                    type: string

  /workers/{name}:
    delete:
      operationId: "server.worker.deleteWorker"
      tags:
        - "Worker"
      summary: "delete workers from database"
      parameters:
        - name: name
          in: path
          type: string
          description: query workers with filters
          required: true
      responses:
        200:
          description: "Successful delete worker operation"
          schema:
            type: "object"
            properties:
              n:
                type: integer
        404:
          description: "Worker name not found"
  /workers/{name}/setExclusion:
    put:
      operationId: "server.worker.setExclusion"
      tags:
        - "Worker"
      summary: "Set a worker exclusion from database"
      description: "Set a worker exclusion from database"
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: worker
          in: body
          schema:
            type: object
            required:
              - db
              - setExcluded
            properties:
              db:
                type: string
              setExcluded:
                type: boolean
      responses:
        200:
          description: "Successful update of worker excluded database"
          schema:
            type: "object"
            properties:
              n:
                type: integer
              nModifider:
                type: integer
              ok:
                type: integer
              updatedExisting:
                type: boolean

  /workers/register/:
    post:
      operationId: "server.worker.registerWorker"
      tags:
        - "Worker"
      summary: "register the caller as worker"
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            required:
              - name
              - command_names
            properties:
              name:
                type: string
              command_names:
                type: array
                items:
                  type: string
      responses:
        200:
          description: "Successful registered a worker"
          
  /workers/{name}/registerCommands:
    put:
      operationId: "server.worker.registerCommands"
      tags:
        - "Worker"
      summary: "Set a worker registered commands"
      description: "Set a worker registered commands"
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: command_names
          in: body
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: "Successful update of worker registed commands"
  
  /workers/{name}/setCommandConfig:
    put:
      operationId: "server.worker.setCommandConfig"
      tags:
        - "Worker"
      summary: "Set a worker registered command plugin and bin path"
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: data
          in: body
          schema:
            type: object
            required:
              - command_name
              - remote_bin
              - plugin
            properties:
              command_name:
                type: string
              remote_bin:
                type: string
              plugin:
                type: string
      responses:
        200:
          description: "Successful update of worker registed commands"

  /workers/{name}/unregister:
    post:
      operationId: "server.worker.unregister"
      tags:
        - "Worker"
      summary: "Remvoe a worker from the lsit of workers"
      description: "Set a worker unregistered"
      parameters:
        - name: name
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful update of worker registed commands"

  /workers/{name}/getRegisteredCommands:
    get:
      operationId: "server.worker.getRegisteredCommands"
      tags:
        - "Worker"
      summary: "Get a worker registered commands"
      description: "Get a worker registered commands"
      parameters:
        - name: name
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful get"
          schema:
            type: array
            items:
              type: string

  /workers/{name}/instructions:
    get:
      operationId: "server.worker.getInstructions"
      tags:
        - "Worker"
      summary: "Pull worker instructions"
      parameters:
        - name: name
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful get"
          schema:
            type: array
            items:
              $ref: '#/definitions/Instructions'
              
  /workers/{name}/instructions/{instruction_iid}:
    delete:
      operationId: "server.worker.deleteInstruction"
      tags:
        - "Worker"
      summary: "delete a worker instruction"
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: instruction_iid
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful deletion of instruction"

  /commands/{pentest}:
    post:
      operationId: "server.ServerModels.Command.insert"
      tags:
        - "Commands"
      summary: "Insert a command or return the conflicting existing one"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Commands'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /commands/update/{pentest}/{command_iid}:
    put:
      operationId: "server.ServerModels.Command.update"
      tags:
        - "Commands"
      summary: "Update a command "
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: command_iid
          in: path
          type: string
          description: command iid to delete
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Commands'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /commands/{pentest}/{command_iid}:
    delete:
      operationId: "server.ServerModels.Command.delete"
      tags:
        - "Commands"
      summary: "Delete a command and dependencies"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: command_iid
          in: path
          type: string
          description: command iid to delete
          required: true
      responses:
        200:
          description: "Get a delete count"
  /group_commands/{pentest}/{command_group_iid}:
    delete:
      operationId: "server.ServerModels.CommandGroup.delete"
      tags:
        - "CommandGroup"
      summary: "Delete a group of command"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: command_group_iid
          in: path
          type: string
          description: group of command iid to delete
          required: true
      responses:
        200:
          description: "Get a delete count"
  /group_commands/{pentest}:
    post:
      operationId: "server.ServerModels.CommandGroup.insert"
      tags:
        - "CommandGroup"
      summary: "Insert a group of command or return the conflicting existing one"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/CommandGroups'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /group_commands/update/{pentest}/{command_group_iid}:
    put:
      operationId: "server.ServerModels.CommandGroup.update"
      tags:
        - "CommandGroup"
      summary: "Update a group of command "
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: command_group_iid
          in: path
          type: string
          description: group of command iid to delete
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/CommandGroups'

      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"

  /defects/{pentest}:
    post:
      operationId: "server.ServerModels.Defect.insert"
      tags:
        - "Defects"
      summary: "Insert a defect or return the conflicting existing one"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Defects'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /defects/update/{pentest}/{defect_iid}:
    put:
      operationId: "server.ServerModels.Defect.update"
      tags:
        - "Defects"
      summary: "Update a defect "
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: defect_iid
          in: path
          type: string
          description: defect iid to delete
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Defects'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /defects/{pentest}/{defect_iid}:
    delete:
      operationId: "server.ServerModels.Defect.delete"
      tags:
        - "Defects"
      summary: "Delete a defect and dependencies"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: defect_iid
          in: path
          type: string
          description: defect iid to delete
          required: true
      responses:
        200:
          description: "Get a delete count"

  /intervals/{pentest}:
    post:
      operationId: "server.ServerModels.Interval.insert"
      tags:
        - "Intervals"
      summary: "Insert an interval or return the conflicting existing one"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Intervals'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /intervals/update/{pentest}/{interval_iid}:
    put:
      operationId: "server.ServerModels.Interval.update"
      tags:
        - "Intervals"
      summary: "Update an interval "
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: interval_iid
          in: path
          type: string
          description: interval iid to delete
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Intervals'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /intervals/{pentest}/{interval_iid}:
    delete:
      operationId: "server.ServerModels.Interval.delete"
      tags:
        - "Intervals"
      summary: "Delete an interval and dependencies"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: interval_iid
          in: path
          type: string
          description: defect iid to delete
          required: true
      responses:
        200:
          description: "Get a delete count"

  /ips/{pentest}:
    post:
      operationId: "server.ServerModels.Ip.insert"
      tags:
        - "Ips"
      summary: "Insert an ip or return the conflicting existing one"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Ips'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /ips/update/{pentest}/{ip_iid}:
    put:
      operationId: "server.ServerModels.Ip.update"
      tags:
        - "Ips"
      summary: "Update an ip "
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: ip_iid
          in: path
          type: string
          description: ip iid to delete
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Ips'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /ips/{pentest}/{ip_iid}:
    delete:
      operationId: "server.ServerModels.Ip.delete"
      tags:
        - "Ips"
      summary: "Delete an ip and dependencies"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: ip_iid
          in: path
          type: string
          description: ip iid to delete
          required: true
      responses:
        200:
          description: "Get a delete count"

  /ports/{pentest}:
    post:
      operationId: "server.ServerModels.Port.insert"
      tags:
        - "Ports"
      summary: "Insert an port or return the conflicting existing one"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Ports'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /ports/update/{pentest}/{port_iid}:
    put:
      operationId: "server.ServerModels.Port.update"
      tags:
        - "Ports"
      summary: "Update a port"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: port_iid
          in: path
          type: string
          description: port iid to delete
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Ports'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /ports/{pentest}/{port_iid}:
    delete:
      operationId: "server.ServerModels.Port.delete"
      tags:
        - "Ports"
      summary: "Delete a port and dependencies"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: port_iid
          in: path
          type: string
          description: port iid to delete
          required: true
      responses:
        200:
          description: "Get a delete count"
  /ports/{pentest}/{port_iid}/addCustomTool/:
    post:
      operationId: "server.ServerModels.Port.addCustomTool"
      tags:
        - "Ports"
      summary: "Add a tool manually to a port in the 'Custom Tools' wave"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: port_iid
          in: path
          type: string
          required: true
        - name: data
          in: body
          required: true
          schema:
            type: object
            required:
              - tool_name
            properties:
              tool_name:
                type: string

      responses:
        200:
          description: "return boolean"
  
  /scopes/{pentest}:
    post:
      operationId: "server.ServerModels.Scope.insert"
      tags:
        - "Scopes"
      summary: "Insert a scope or return the conflicting existing one"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Scopes'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /scopes/update/{pentest}/{scope_iid}:
    put:
      operationId: "server.ServerModels.Scope.update"
      tags:
        - "Scopes"
      summary: "Update a scope"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: scope_iid
          in: path
          type: string
          description: scope iid to delete
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Scopes'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /scopes/{pentest}/{scope_iid}:
    delete:
      operationId: "server.ServerModels.Scope.delete"
      tags:
        - "Scopes"
      summary: "Delete a scope and dependencies"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: scope_iid
          in: path
          type: string
          description: scope iid to delete
          required: true
      responses:
        200:
          description: "Get a delete count"

  /tools/{pentest}:
    post:
      operationId: "server.ServerModels.Tool.insert"
      tags:
        - "Tools"
      summary: "Insert a tool or return the conflicting existing one"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Tools'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /tools/update/{pentest}/{tool_iid}:
    put:
      operationId: "server.ServerModels.Tool.update"
      tags:
        - "Tools"
      summary: "Update a tool"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: tool_iid
          in: path
          type: string
          description: tool iid to delete
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Tools'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /tools/{pentest}/{tool_iid}:
    delete:
      operationId: "server.ServerModels.Tool.delete"
      tags:
        - "Tools"
      summary: "Delete a tool and dependencies"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: tool_iid
          in: path
          type: string
          description: tool iid to delete
          required: true
      responses:
        200:
          description: "Get a delete count"

  /waves/{pentest}:
    post:
      operationId: "server.ServerModels.Wave.insert"
      tags:
        - "Waves"
      summary: "Insert a wave or return the conflicting existing one"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Waves'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /waves/update/{pentest}/{wave_iid}:
    put:
      operationId: "server.ServerModels.Wave.update"
      tags:
        - "Waves"
      summary: "Update a wave"
      parameters:
        - name: pentest
          in: path
          type: string
          required: true
        - name: wave_iid
          in: path
          type: string
          description: wave iid to delete
          required: true
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Waves'
      responses:
        200:
          description: "Get a boolean for success and insert idof either new or conflicting object"
  /waves/{pentest}/{wave_iid}:
    delete:
      operationId: "server.ServerModels.Wave.delete"
      tags:
        - "Waves"
      summary: "Delete a wave and dependencies"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: wave_iid
          in: path
          type: string
          description: wave wave_iid to delete
          required: true
      responses:
        200:
          description: "Get a delete count"

  /files/{pentest}/upload/proof/{defect_iid}:
    post:
      operationId: "server.FileManager.upload"
      tags:
        - "FileManager"
      summary: "Upload a file"
      consumes:
        - multipart/form-data
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: defect_iid
          in: path
          type: string
          description: file will be tied to given iid
          required: true
        - name: upfile
          in: formData
          type: file
          description: The file to upload
          required: true  
      responses:
        200:
          description: "Successfully uploaded file"

  /files/{pentest}/download/{filetype}/{attached_iid}:
    get:
      operationId: "server.FileManager.listFiles"
      tags:
        - "FileManager"
      summary: "Lists attached to given iid"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: attached_iid
          in: path
          type: string
          description: file will be tied to given iid
          required: true
        - name: filetype
          in: path
          type: string
          enum: ["result", "proof"]
          required: true
      responses:
        200:
          description: "Successfully listed files"

  /files/{pentest}/download/{filetype}/{attached_iid}/{filename}:
    get:
      operationId: "server.FileManager.download"
      tags:
        - "FileManager"
      summary: "Download a file"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: attached_iid
          in: path
          type: string
          description: file will be tied to given iid
          required: true
        - name: filetype
          in: path
          type: string
          enum: ["result", "proof"]
          required: true
        - name: filename
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successfully downloaded file"

  /files/{pentest}/{defect_iid}/{filename}:
    delete:
      operationId: "server.FileManager.rmProof"
      tags:
        - "FileManager"
      summary: "Remove a proof file"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: defect_iid
          in: path
          type: string
          description: object iid which have the file to delete
          required: true
        - name: filename
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successfully deleted the file"

  /files/{pentest}/import:
    post:
      operationId: "server.FileManager.importExistingFile"
      tags:
        - "FileManager"
      summary: "Import an existing tool file"
      consumes:
        - multipart/form-data
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: upfile
          in: formData
          type: file
          description: The file to upload
          required: true
        - name: plugin
          in: formData
          type: string
          description: plugin name to use or "auto-detect"
          required: true
      responses:
        200:
          description: "Successfully imported the file"
          
  /tools/{pentest}/craftCommandLine/{tool_iid}:
    get:
      operationId: "server.ServerModels.Tool.craftCommandLine"
      tags:
        - "Tools"
      summary: "Get the command line to execute the tool (using plugin + parameters) a marker for |outputDir| is to be replaced"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: tool_iid
          in: path
          type: string
          description: tool iid for which we want a command line
          required: true
        - name: plugin
          in: query
          type: string
          required: false
          default: ""
      responses:
        200:
          description: "The command line to execute with a marker for |outputDir| to be replaced"

  /tools/{pentest}/importResult/{tool_iid}:
    post:
      operationId: "server.ServerModels.Tool.importResult"
      tags:
        - "Tools"
      summary: "Upload a tool result file"
      consumes:
        - multipart/form-data
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: tool_iid
          in: path
          type: string
          description: tool iid to launch
          required: true
        - name: upfile
          in: formData
          type: file
          description: The file to upload
          required: true  
        - name: plugin
          in: formData
          type: string
          required: false
          default: ""
      responses:
        200:
          description: "Successfully uploaded file"
  
  /tools/{pentest}/launchTask/{tool_iid}:
    post:
      operationId: "server.ServerModels.Tool.launchTask"
      tags:
        - "Tools"
      summary: "Try to launch a tool on any worker"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: tool_iid
          in: path
          type: string
          description: tool id to launch
          required: true
        - name: data
          in: body
          schema:
            type: object
            properties:
              plugin:
                type: string
                default: ""
              checks:
                type: boolean
                default: true
      responses:
        200:
          description: "Successfully launched task"
  
  /tools/{pentest}/stopTask/{tool_iid}:
    post:
      operationId: "server.ServerModels.Tool.stopTask"
      tags:
        - "Tools"
      summary: "Try to stop a tool"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: tool_iid
          in: path
          type: string
          description: tool id to stop
          required: true
        - name: data
          in: body
          schema:
            type: object
            properties:
              forceReset:
                type: boolean
                default: false
      responses:
        200:
          description: "Successfully stopped task"

  /tools/{pentest}/{tool_iid}/changeStatus:
    post:
      operationId: "server.ServerModels.Tool.setStatus"
      tags:
        - "Tools"
      summary: "Update a tool staus"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: tool_iid
          in: path
          type: string
          description: tool id to stop
          required: true
        - name: data
          in: body
          schema:
            type: object
            required:
              - newStatus
            properties:
              newStatus:
                type: array
                items:
                  type: string
                  enum: ["OOS","OOT","not_done","running","error","done", "ready"]
              arg:
                type: string
                default: ""

      responses:
        200:
          description: "Successfully updated tool status"

  /autoscan/{pentest}/start:
    post:
      operationId: "server.AutoScanMaster.startAutoScan"
      tags:
        - "Auto scan"
      summary: "Start an automatic scan"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
      responses:
        200:
          description: "Successfully started auto scan"
  /autoscan/{pentest}/status:
    get:
      operationId: "server.AutoScanMaster.getAutoScanStatus"
      tags:
        - "Auto scan"
      summary: "Returns status of automatic scan"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
      responses:
        200:
          description: "Successfully returned status of auto scan"
  /autoscan/{pentest}/stop:
    post:
      operationId: "server.AutoScanMaster.stopAutoScan"
      tags:
        - "Auto scan"
      summary: "Stop an automatic scan"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
      responses:
        200:
          description: "Successfully stoped auto scan"
    
  /report/templates:
    get:
      operationId: "server.Report.getTemplateList"
      tags:
        - "Report"
      summary: "Get a lsit of report template"
      responses:
        200:
          description: "A list of avalaible templates names"
  
  /report/templates/download:
    get:
      operationId: "server.Report.downloadTemplate"
      tags:
        - "Report"
      summary: "Download a report template"
      parameters:
        - name: templateName
          in: query
          type: string
          description: template name to download
          required: true
      responses:
        200:
          description: "A template file docx or pptx"
  
  /report/templates/upload:
    post:
      operationId: "server.Report.uploadTemplate"
      tags:
        - "Report"
      summary: "Upload a report template"
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          type: file
          description: The file to upload
          required: true  
      responses:
        200:
          description: "An indication of success for uploadfin template file docx or pptx"       
          
  /report/{pentest}/generate:
    get:
      operationId: "server.Report.generateReport"
      tags:
        - "Report"
      summary: "Generate a report and returns it"
      parameters:
        - name: pentest
          in: path
          type: string
          description: pentest name
          required: true
        - name: templateName
          in: query
          type: string
          description: template name to generate from
          required: true
        - name: contractName
          in: query
          type: string
          description: template name to generate from
          required: true
        - name: clientName
          in: query
          type: string
          description: template name to generate from
          required: true  
        - name: mainRedactor
          in: query
          type: string
          description: template name to generate from
          required: false
          default: "N/A"
      responses:
        200:
          description: "A template file docx or pptx"

          