paths:
  /report/langs:
    get:
      operationId: pollenisator.server.modules.report.report.getLangList
      tags:
        - Report
      summary: Get a list of existings langs templates
      responses:
        "200":
          description: A list of langs as string
          content:
            application/json:
              examples:
                Success:
                  value: '["en", "fr", ...]'
  /report/{lang}/templates:
    get:
      operationId: pollenisator.server.modules.report.report.getTemplateList
      tags:
        - Report
      summary: Get a lsit of report template
      parameters:
        - name: lang
          in: path
          description: template language
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of templates as string
          content:
            application/json:
              examples:
                Success:
                  value: '["Mddel.docx", "Model2.pptx", ...]'
        "400":
          description: Invalid parameters
          content:
            application/json:
              examples:
                Lang invalid:
                  value: '"There is no existing templates for this lang"'
  /report/{lang}/templates/download:
    get:
      operationId: pollenisator.server.modules.report.report.downloadTemplate
      tags:
        - Report
      summary: Download a report template
      parameters:
        - name: templateName
          in: query
          description: template name to download
          required: true
          schema:
            type: string
        - name: lang
          in: path
          description: template language
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A template file docx, pptx or xlsx
          content:
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.presentationml.document:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
              
        "400":
          description: Invalid parameters
          content:
            application/json:
              examples:
                docx, xlsx or pptx expected:
                  value: '"A template is either a pptx, xlsx or a docx document"'
                no template:
                  value: '"There is no existing templates for this lang"'
        "404":
          description: Not found
          content:
            application/json:
              examples:
                template not found:
                  value: '"Template file not found"'

  /report/{lang}/templates/upload:
    post:
      operationId: pollenisator.server.modules.report.report.uploadTemplate
      tags:
        - Report
      summary: Upload a report template
      parameters:
        - name: lang
          in: path
          description: template language
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                upfile:
                  description: The file to upload
                  type: string
                  format: binary
              required:
                - upfile
      responses:
        "200":
          description: An indication of success or failure for upload
          content:
            application/json:
              examples:
                Success:
                  value: '"Success"'
                Failure when writing:
                  value: '"Failure"'
        "400":
          description: Invalid parameter
          content:
            application/json:
              examples:
                unexpected extension:
                  value: '"Invalid extension for template, must be xlsx, pptx or docx"'
  "/report/DefectTemplates/import":
    post:
      operationId: pollenisator.server.servermodels.defect.importDefectTemplates
      tags:
        - Defect Template
      summary: Import Defect templates in pollenisator from json file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                upfile:
                  description: The file to upload
                  type: string
                  format: binary
              required:
                - upfile
      responses:
        "200":
          description: a indicator of success
          content:
            application/json:
              examples:
                Success:
                  value: "True"
  "/report/DefectTemplates/insert":
    post:
      operationId: pollenisator.server.servermodels.defect.insertDefectTemplate
      tags:
        - Defect Template
      summary: Creat a Defect template
      requestBody:
         $ref: "#/components/requestBodies/DefectTemplate"
      responses:
        "200":
          description: a indicator of success
          content:
            application/json:
              examples:
                Success:
                  value: "True"
  '/report/DefectTemplates/delete/{iid}':
    delete:
      operationId: pollenisator.server.servermodels.defect.deleteDefectTemplate
      tags:
        - Defect Template
      summary: Delete a defect template
      parameters:
        - name: iid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully deleted a template
        '404':
          description: not found

  "/report/DefectTemplates/update/{iid}":
    put:
      operationId: pollenisator.server.servermodels.defect.updateDefectTemplate
      tags:
        - Defect Template
      summary: Update Defect template in db
      description: Update Defect template in db
      parameters:
        - name: iid
          in: path
          description: Defect template iid to edit
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/DefectTemplate"
              
      responses:
        "200":
          description: successfully updated an item
          content:
            application/json:
              examples:
                Success:
                  value: '{"n": 1, "nModified": 1, "ok": 1, "updatedExisting": true}'
        '400':
          description: Pipeline argument invalid
          content:
            application/json:
              examples:
                Success:
                  value: 'Pipeline|Update pipeline argument was not valid'
        '403':
          description: Unknown param value
          content:
            application/json:
              examples:
                Success:
                  value: 'Pentest|Collection argument is not a valid pollenisator collection'
  
              
  "/report/{pentest}/generate":
    get:
      operationId: pollenisator.server.modules.report.report.generateReport
      tags:
        - Report
      summary: Generate a report and returns it
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: templateName
          in: query
          description: template name to generate from
          required: true
          schema:
            type: string
        - name: contractName
          in: query
          description: template name to generate from
          required: true
          schema:
            type: string
        - name: clientName
          in: query
          description: template name to generate from
          required: true
          schema:
            type: string
        - name: mainRedactor
          in: query
          description: template name to generate from
          required: false
          schema:
            type: string
            default: "N/A"
        - name: lang
          in: query
          description: lang of the template
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Return a generated report file
          content:
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.presentationml.document:
              schema:
                type: string
                format: binary
        "400":
          description: Invalid parameter
          content:
            application/json:
              examples:
                Invalid extension:
                  value: '"Invalid extension for template, must be xlsx, pptx or docx"'
                No template for lang:
                  value: '"There is no existing templates for this lang"'
        "404":
          description: not found
          content:
            application/json:
              examples:
                Template not found:
                  value: '"Template file not found"'
  "/report/{pentest}/defects":
    get:
      operationId: pollenisator.server.servermodels.defect.getGlobalDefects
      tags:
        - Report
      summary: Get the ordered list of global defect
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of defect ordered by index
          content:
            application/json:
              examples:
                Ordered defect list:
                  value: '[
  {
    "_id": "ObjectId|60f194db1255fd087c769756",
    "ease": "Moderate",
    "impact": "Critical",
    "index": "0",
    "infos": {},
    "ip": "",
    "notes": "",
    "port": "",
    "proofs": [],
    "proto": "",
    "redactor": "N/A",
    "risk": "Critical",
    "tags": [],
    "title": "XSS",
    "synthesis": "An XSS or Cross-Site-Scripting attack is ..."
    "description": "The XXX server is vulnerable to XSS in XXX form ...",
    "language": "en",
    "type": [
      "Application"
    ],
    "fixes":[
      {
        "title":"Filter user input",
        "synthesis": "..",
        "description":"...",
        "execution": "Easy"
        "gain": "Strong"
      },
    ]
  },
]'
  "/report/{pentest}/defects/move/{defect_id_to_move}/{target_id}":
    post:
      operationId: pollenisator.server.servermodels.defect.moveDefect
      tags:
        - Report
      summary: Move one defect at the index of the other. Other index are impacted
      parameters:
        - name: pentest
          in: path
          description: pentest name
          required: true
          schema:
            type: string
        - name: defect_id_to_move
          in: path
          description: defect_id to move
          required: true
          schema:
            type: string
        - name: target_id
          in: path
          description: target_id to move to
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              examples:
                Success destination index:
                  value: '2'
        "404":
          description: Not found
          content:
            application/json:
              examples:
                not found moving defect:
                  value: '"This global defect does not exist"'
                not found destination defect:
                  value: '"the target global defect does not exist"'

  "/report/search":
    post:
      operationId: pollenisator.server.modules.report.report.search
      tags:
        - Report
      summary: search a defect/remark in  templates
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - terms 
                - type
              properties:
                terms:
                  type: string
                type:
                  type: string
                  enum:
                    - defect
                    - remark
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                  answers:
                    type: array
                    items:
                      type: object
                      properties:
                        description:
                          type: string
                        ease:
                          type: string
                          enum: 
                            - Easy
                            - Moderate
                            - Difficult
                            - Arduous
                        impact:
                          type: string
                          enum:
                            - Minor
                            - Important
                            - Major
                            - Critical
                        perimeter:
                          type: string
                        risk:
                          type: string
                          enum:
                            - Minor
                            - Important
                            - Major
                            - Critical
                        synthesis:
                          type: string
                        title:
                          type: string
                        type:
                          type: string
                        language:
                          type: string
                        fixes:
                          type: array
                          items:
                            type: object
                            properties:
                              description:
                                type: string
                              execution:
                                type: string
                                enum:
                                  - Quick Win
                                  - Moderate
                                  - Mean
                                  - Hard
                              gain:
                                type: string
                                enum:
                                  - Weak
                                  - Moderate
                                  - Mean
                                  - Strong
                              synthesis:
                                type: string
                              title:
                                type: string

        "503":
          description: Error knowledge database
          content:
            application/json:
              examples:
                No knowledge database:
                  value: '"There is no knowledge database implemented."'
                Unreachable:
                  value: '"The knowledge database is unreachable"'
                Error from knowledge db:
                  value: '"The knowledge dabatase encountered an issue : "{response_text}'