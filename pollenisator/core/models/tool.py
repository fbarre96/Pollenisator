"""Tool Model. A tool is an instanciation of a command against a target"""

from pollenisator.core.components.mongo import DBClient
from pollenisator.core.models.element import Element
from bson.objectid import ObjectId
from datetime import datetime
import pollenisator.core.components.utils as utils
import re

class Tool(Element):
    """
    Represents a Tool object that defines a tool. A tool is a command run materialized on a runnable object (wave, scope, ip, or port)

    Attributes:
        coll_name: collection name in pollenisator database
    """
    coll_name = "tools"

    def __init__(self, valuesFromDb=None):
        """Constructor
        Args:
            valueFromDb: a dict holding values to load into the object. A mongo fetched interval is optimal.
                        possible keys with default values are : _id(None), parent(None),  infos({}),
                        name(""), wave(""), scope(""), ip(""), port(""), proto("tcp"), lvl(""), text(""), dated("None"),
                        datef("None"), scanner_ip("None"), status([]), notes(""), resultfile(""), plugin_used("")
        """
        if valuesFromDb is None:
            valuesFromDb = {}
        super().__init__(valuesFromDb.get("_id", None), valuesFromDb.get("parent", None),valuesFromDb.get("infos", {}))
        self.datef = "None"
        self.dated = "None"
        self.scanner_ip = "None"
        self.resultfile = ""
        self.plugin_used = ""
        self.status = []
        self.initialize(str(valuesFromDb.get("command_iid", "")), str(valuesFromDb.get("check_iid", "")), valuesFromDb.get("wave", ""),
                        valuesFromDb.get("name", None),
                        valuesFromDb.get(
                            "scope", ""), valuesFromDb.get("ip", ""),
                        str(valuesFromDb.get("port", "")), valuesFromDb.get(
                            "proto", "tcp"),
                        valuesFromDb.get(
                            "lvl", ""), valuesFromDb.get("text", ""),
                        valuesFromDb.get("dated", "None"), valuesFromDb.get(
                            "datef", "None"),
                        valuesFromDb.get(
                            "scanner_ip", "None"), valuesFromDb.get("status", []), valuesFromDb.get("notes", ""), valuesFromDb.get("resultfile", ""), valuesFromDb.get("plugin_used", ""), valuesFromDb.get("infos", {}))

    def initialize(self, command_iid, check_iid=None, wave="", name=None, scope="", ip="", port="", proto="tcp", lvl="", text="",
                   dated="None", datef="None", scanner_ip="None", status=None, notes="", resultfile="", plugin_used="", infos=None):
        
        """Set values of tool
        Args:
            command_iid: iid of the command 
            check_iid: the checkInstance iid if associated with one
            wave: the target wave name of this tool (only if lvl is "wave"). Default  ""
            name: tool name, if None it will be crafted
            scope: the scope string of the target scope of this tool (only if lvl is "network"). Default  ""
            ip: the target ip "ip" of this tool (only if lvl is "ip" or "port"). Default  ""
            port: the target port "port number" of this tool (only if lvl is "port"). Default  ""
            proto: the target port "proto" of this tool (only if lvl is "port"). Default  "tcp"
            lvl: the tool level of exploitation (wave, network, ip ort port/). Default ""
            text: the command to be launched. Can be empty if name is matching  a command. Default ""
            dated: a starting date and tiem for this interval in format : '%d/%m/%Y %H:%M:%S'. or the string "None"
            datef: an ending date and tiem for this interval in format : '%d/%m/%Y %H:%M:%S'. or the string "None"
            scanner_ip: the worker name that performed this tool. "None" if not performed yet. Default is "None"
            status: a list of status string describing this tool state. Default is None. (Accepted values for string in list are done, running, OOT, OOS)
            notes: notes concerning this tool (opt). Default to ""
            resultfile: an output file generated by the tool. Default is ""
            plugin_used: the plugin used when this tool was imported. Default is ""
            infos: a dictionnary of additional info
        Returns:
            this object
        """
        if name is None:
            if command_iid is not None and command_iid != "" and command_iid != "None":
                dbclient = DBClient.getInstance()

                res = dbclient.findInDb(self.pentest, "commands", {"$or": [
                    {"original_iid":str(command_iid)},
                    {"_id": ObjectId(command_iid)}
                ]}, False)
                name = res["name"]
                self.command_iid = str(res["_id"])
            else:
                self.command_iid = None
        self.check_iid = str(check_iid) if check_iid is not None else None
        self.name = name
        self.wave = wave
        self.scope = scope
        self.ip = ip
        self.port = str(port)
        self.proto = proto
        self.lvl = lvl
        self.text = text
        self.dated = dated
        self.datef = datef
        self.scanner_ip = scanner_ip
        self.notes = notes
        self.resultfile = resultfile
        self.plugin_used = plugin_used
        self.infos = infos if infos is not None else {}
        if status is None:
            status = []
        elif isinstance(status, str):
            status = [status]
        self.status = status
        return self

    def getData(self):
        return {"command_iid": self.command_iid, "check_iid": self.check_iid, 
                "name": self.name, "wave": self.wave, "scope": self.scope,
                "ip": self.ip, "port": self.port, "proto": self.proto,
                "lvl": self.lvl, "text": self.text, "dated": self.dated,
                "datef": self.datef, "scanner_ip": self.scanner_ip,
                "notes": self.notes, "_id": self.getId(),  "infos": self.infos, "status":self.getStatus()}


    def getStatus(self):
        """
        Get the tool executing status.

        Return:
            Returns a list of status status are :
                OOT : Out of time = This tool is in a wave which does not have any interval for now.
                OOS : Out os scope = This tool is in an IP OOS
                done : This tool is completed
                running : This tool is being run."""
        return self.status


    @classmethod
    def __sanitize(cls, var_to_path):
        """Replace unwanted chars in variable given: '/', ' ' and ':' are changed to '_'
        Args:
            var_to_path: a string to sanitize to use a path folder
        Returns:
            modified arg as string
        """
        var_to_path = var_to_path.replace("/", "_")
        var_to_path = var_to_path.replace(" ", "_")
        var_to_path = var_to_path.replace(":", "_")
        return var_to_path

    def getOutputDir(self, pentest_uuid):
        """
        Get the tool required output directory path.
        Args:
            pentest_uuid: the pentest database uuid
        Return:
            Returns the output directory of this tool instance.
        """
        # get command needed directory
        output_dir = Tool.__sanitize(
            pentest_uuid)+"/"+Tool.__sanitize(self.name)+"/"
        if self.wave != "" and self.wave is not None:
            output_dir += Tool.__sanitize(self.wave)+"/"
        if self.scope != "" and self.scope is not None:
            output_dir += Tool.__sanitize(self.scope)+"/"
        if self.ip != "" and self.ip is not None:
            output_dir += Tool.__sanitize(self.ip)+"/"
        if self.port != "" and self.port is not None:
            port_dir = str(self.port) if str(self.proto) == "tcp" else str(
                self.proto)+"/"+str(self.port)
            output_dir += Tool.__sanitize(port_dir)+"/"
        return output_dir

    

    

    def markAsRunning(self, workerName):
        """Set this tool status as running but keeps OOT or OOS.
        Sets the starting date to current time and ending date to "None"
        Args:
            workerName: the worker name that is running this tool
        """
        self.dated = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        self.datef = "None"
        newStatus = ["running"]
        if "OOS" in self.status:
            newStatus.append("OOS")
        if "OOT" in self.status:
            newStatus.append("OOT")
        self.status = newStatus
        self.scanner_ip = workerName
        self.update()

    def markAsNotDone(self):
        """Set this tool status as not done by removing "done" or "running" status.
        Also resets starting and ending date as well as worker name
        """
        self.dated = "None"
        self.datef = "None"
        self.scanner_ip = "None"
        if "done" in self.status:
            self.status.remove("done")
        if "running" in self.status:
            self.status.remove("running")
        if not self.status:
            self.status = ["ready"]
        self.update()

    

    

    def getResultFile(self):
        """Returns the result file of this tool
        Returns:
            strings
        """
        return self.resultfile